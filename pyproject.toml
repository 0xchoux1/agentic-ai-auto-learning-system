[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aals"
version = "0.1.0"
description = "Agentic AI Auto Learning System for SRE/Infrastructure Engineers"
authors = [
    {name = "AALS Team", email = "team@aals.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
dependencies = [
    # Core dependencies
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database & Storage
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "sqlalchemy[asyncio]>=2.0.0",
    
    # HTTP clients & APIs
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
    
    # Configuration & Environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    
    # Logging & Monitoring
    "structlog>=23.2.0",
    "python-json-logger>=2.0.0",
    
    # Testing & Development
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    
    # Security
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
# Integration dependencies (added per module)
slack = ["slack-sdk>=3.26.0"]
github = ["PyGithub>=2.1.0"]
prometheus = ["prometheus-client>=0.19.0"]
ssh = ["paramiko>=3.4.0", "asyncssh>=2.14.0"]
llm = ["openai>=1.6.0", "anthropic>=0.8.0"]

# Development dependencies
dev = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

[project.scripts]
aals = "aals.cli:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "--cov=aals --cov-report=html --cov-report=term-missing"

[tool.coverage.run]
source = ["aals"]
omit = ["tests/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]